## Prerequisites for CachyOS

### 1. **Install Nix Package Manager**
```bash
# Install Nix with flakes support
sh <(curl -L https://nixos.org/nix/install) --daemon

# After installation, enable experimental features
mkdir -p ~/.config/nix
echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

# Restart your shell or source the nix profile
source /etc/profile.d/nix.sh
```

### 2. **Enable Cross-Compilation Support**
```bash
# Add aarch64 as a supported platform for cross-compilation
sudo mkdir -p /etc/nix
echo "extra-platforms = aarch64-linux" | sudo tee -a /etc/nix/nix.conf

# Install QEMU for emulation (needed for cross-compilation)
sudo paru -S qemu-user-static qemu-user-static-binfmt

# Verify binfmt is configured
ls /proc/sys/fs/binfmt_misc/qemu-aarch64
```

### 3. **Install Python Dependencies** (for PSK generation)
```bash
# Install Python and pip
sudo paru -S python python-pip

# Install required Python packages
pip install --user requests cryptography
```

### 4. **Install Build Tools**
```bash
# Basic tools needed by the script
sudo paru -S git curl jq wget zstd

# Optional but helpful
sudo paru -S htop tmux
```

### 5. **Configure Nix for CachyOS Stability**
The script already detects CachyOS and adds these flags automatically:
- `--option sandbox false` (disables sandboxing that can cause issues)
- `--max-jobs 1` (reduces parallel builds to prevent resource issues)

### 6. **Increase System Resources** (if needed)
```bash
# Check available disk space (need ~20GB free)
df -h /

# If using tmpfs, increase /tmp size
sudo mount -o remount,size=10G /tmp

# Or use a different build directory
export TMPDIR=/var/tmp
```

## Quick Setup Script for CachyOS

Here's a one-shot setup script:

```bash
#!/bin/bash
set -euo pipefail

echo "Setting up CachyOS for Pi image cross-compilation..."

# Install Nix
if ! command -v nix &>/dev/null; then
    echo "Installing Nix..."
    sh <(curl -L https://nixos.org/nix/install) --daemon
    source /etc/profile.d/nix.sh
fi

# Configure Nix
echo "Configuring Nix..."
sudo mkdir -p /etc/nix
echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf
echo "extra-platforms = aarch64-linux" | sudo tee -a /etc/nix/nix.conf

# Install QEMU for cross-compilation
echo "Installing QEMU..."
sudo paru -S --noconfirm qemu-user-static qemu-user-static-binfmt

# Install Python and dependencies
echo "Installing Python dependencies..."
sudo paru -S --noconfirm python python-pip
pip install --user requests cryptography

# Install build tools
echo "Installing build tools..."
sudo paru -S --noconfirm git curl jq wget zstd

# Restart nix daemon to pick up config changes
sudo systemctl restart nix-daemon

echo "Setup complete! You may need to restart your shell."
echo "Test with: nix --version"
```

## Building the Image

Once prerequisites are installed:

1. **Generate PSK:**
```bash
cd ../discovery-service
python3 generate_psk.py
```

2. **Build the image:**
```bash
cd ../bootstrap-image
./build-image.sh -p <your-64-char-psk> -i <discovery-ip> -r <config-repo>
```

## CachyOS-Specific Notes

- **Memory Usage**: Cross-compilation can be memory-intensive. Monitor with `htop`
- **Build Time**: First build will take 30-60 minutes as it downloads dependencies
- **Disk Space**: Ensure at least 20GB free space for build artifacts
- **CPU**: The `--max-jobs 1` flag helps stability but increases build time

## Troubleshooting

If you encounter issues:

1. **"system 'aarch64-linux' not supported"**: Ensure QEMU binfmt is installed and configured
2. **Sandbox errors**: The script auto-detects CachyOS and disables sandbox
3. **Out of memory**: Reduce parallel jobs or increase swap
4. **Network timeouts**: The script uses nixos cache servers, ensure good internet connection
