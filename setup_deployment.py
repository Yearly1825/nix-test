#!/usr/bin/env python3
"""
Unified Deployment Configuration Manager
========================================

This script manages the deployment configuration for the sensor network.
It can run in interactive mode or just test NTFY connectivity.

Usage:
  python3 setup_deployment.py           # Interactive configuration
  python3 setup_deployment.py --ntfy-test  # Test NTFY settings only
"""

import argparse
import secrets
import json
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional

try:
    import yaml
except ImportError:
    print("üì¶ Installing PyYAML...")
    import subprocess
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--user", "PyYAML"], check=True)
    except subprocess.CalledProcessError:
        print("‚ùå Failed to install PyYAML. Please install manually:")
        print("   pip install --user PyYAML")
        print("   or: brew install python-yaml")
        sys.exit(1)
    import yaml

try:
    import requests
except ImportError:
    print("üì¶ Installing requests...")
    import subprocess
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--user", "requests"], check=True)
    except subprocess.CalledProcessError:
        print("‚ùå Failed to install requests. Please install manually:")
        print("   pip install --user requests")
        sys.exit(1)
    import requests

# Color output
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
RED = '\033[0;31m'
BLUE = '\033[0;34m'
CYAN = '\033[0;36m'
NC = '\033[0m'  # No Color

def log_info(msg: str): print(f"{GREEN}[INFO]{NC} {msg}")
def log_warn(msg: str): print(f"{YELLOW}[WARN]{NC} {msg}")
def log_error(msg: str): print(f"{RED}[ERROR]{NC} {msg}")
def log_debug(msg: str): print(f"{BLUE}[DEBUG]{NC} {msg}")
def log_header(msg: str): print(f"{CYAN}{msg}{NC}")

class DeploymentConfigurator:
    """Manages deployment configuration for the sensor network"""

    def __init__(self):
        self.template_path = Path(".deployment.template.yaml")
        self.config_path = Path(".deployment.yaml")
        self.config = None

    def load_template(self) -> Dict[str, Any]:
        """Load the deployment template"""
        if not self.template_path.exists():
            log_error(f"Template not found: {self.template_path}")
            log_error("Please ensure you're running from the nix-sensor root directory")
            sys.exit(1)

        with open(self.template_path, 'r') as f:
            return yaml.safe_load(f)

    def load_config(self) -> Optional[Dict[str, Any]]:
        """Load existing deployment configuration if it exists"""
        if not self.config_path.exists():
            return None

        try:
            with open(self.config_path, 'r') as f:
                return yaml.safe_load(f)
        except Exception as e:
            log_error(f"Failed to load existing config: {e}")
            return None

    def save_config(self, config: Dict[str, Any]):
        """Save the deployment configuration"""
        # Add metadata
        config['_metadata'] = {
            'generated_at': datetime.utcnow().isoformat() + 'Z',
            'generated_by': 'setup_deployment.py',
            'version': '1.0'
        }

        try:
            with open(self.config_path, 'w') as f:
                # Write header comment
                f.write("# Deployment Configuration - Generated by setup_deployment.py\n")
                f.write("# DO NOT EDIT MANUALLY - Use setup_deployment.py to make changes\n")
                f.write(f"# Generated: {datetime.utcnow().isoformat()}Z\n\n")
                yaml.dump(config, f, default_flow_style=False, sort_keys=False)

            log_info(f"Configuration saved to {self.config_path}")
            return True
        except Exception as e:
            log_error(f"Failed to save configuration: {e}")
            return False

    def generate_psk(self) -> str:
        """Generate a cryptographically secure PSK"""
        return secrets.token_hex(32)  # 64 hex characters

    def generate_admin_token(self) -> str:
        """Generate a secure admin token"""
        return secrets.token_urlsafe(32)

    def test_ntfy(self, config: Dict[str, Any]) -> bool:
        """Test NTFY notification connectivity"""
        ntfy_config = config.get('ntfy', {})

        if not ntfy_config.get('enabled', False):
            log_warn("NTFY is disabled in configuration")
            return True

        url = ntfy_config.get('url', '')
        if not url:
            log_error("NTFY URL not configured")
            return False

        # Prepare test message
        deployment_name = config.get('deployment', {}).get('name', 'UNKNOWN')
        test_message = (
            f"Configuration Test\\n"
            f"Deployment: {deployment_name}\\n"
            f"Time: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC\\n"
            f"Source: setup_deployment.py"
        )

        # Prepare headers
        headers = {
            "Title": f"{deployment_name} Config Test",
            "Priority": ntfy_config.get('priority', 'default'),
            "Tags": ",".join(ntfy_config.get('tags', []))
        }

        # Add authentication if configured
        auth_type = ntfy_config.get('auth_type', 'none')

        if auth_type == 'basic':
            username = ntfy_config.get('username', '')
            password = ntfy_config.get('password', '')
            if username and password:
                import base64
                credentials = base64.b64encode(f"{username}:{password}".encode()).decode()
                headers['Authorization'] = f"Basic {credentials}"

        elif auth_type == 'bearer':
            token = ntfy_config.get('token', '')
            if token:
                headers['Authorization'] = f"Bearer {token}"

        try:
            timeout = ntfy_config.get('timeout_seconds', 10)
            log_info(f"Testing NTFY connectivity to {url}...")

            response = requests.post(
                url,
                data=test_message,
                headers=headers,
                timeout=timeout
            )
            response.raise_for_status()

            log_info("‚úÖ NTFY test message sent successfully!")
            log_info("Check your NTFY client to see the test message")
            return True

        except requests.exceptions.Timeout:
            log_error(f"‚ùå NTFY test failed: Connection timeout after {timeout} seconds")
            return False
        except requests.exceptions.ConnectionError:
            log_error(f"‚ùå NTFY test failed: Could not connect to {url}")
            return False
        except requests.exceptions.HTTPError as e:
            log_error(f"‚ùå NTFY test failed: HTTP {e.response.status_code} - {e.response.text}")
            return False
        except Exception as e:
            log_error(f"‚ùå NTFY test failed: {e}")
            return False

    def interactive_setup(self):
        """Run interactive configuration setup"""
        log_header("üöÄ Sensor Network Deployment Configurator")
        log_header("=" * 50)

        # Load template and existing config
        template = self.load_template()
        existing_config = self.load_config()
        config = existing_config.copy() if existing_config else template.copy()

        if existing_config:
            log_info("Found existing configuration - will update values")
            print()

        # Deployment Information
        log_header("üìã Deployment Configuration:")
        current_name = config.get('deployment', {}).get('name', 'SENSOR')
        name = input(f"  Deployment name [{current_name}]: ").strip() or current_name

        current_env = config.get('deployment', {}).get('environment', 'production')
        environment = input(f"  Environment [{current_env}]: ").strip() or current_env

        current_desc = config.get('deployment', {}).get('description', 'Raspberry Pi Sensor Network')
        description = input(f"  Description [{current_desc}]: ").strip() or current_desc

        config['deployment'] = {
            'name': name,
            'environment': environment,
            'description': description
        }

        print()

        # Network Configuration
        log_header("üåê Network Configuration:")
        current_ip = config.get('discovery_service', {}).get('ip', '10.42.0.1')
        ip = input(f"  Discovery service IP [{current_ip}]: ").strip() or current_ip

        current_port = config.get('discovery_service', {}).get('port', 8080)
        port_input = input(f"  Discovery service port [{current_port}]: ").strip()
        port = int(port_input) if port_input else current_port

        current_repo = config.get('bootstrap', {}).get('config_repo_url', 'github:yearly1825/nixos-pi-configs')
        repo = input(f"  Config repository [{current_repo}]: ").strip() or current_repo

        print()

        # Security Configuration
        log_header("üîê Security Configuration:")
        current_psk = config.get('discovery_service', {}).get('psk', '')

        if current_psk and not current_psk.startswith('CHANGE_ME'):
            log_info(f"  ‚úì Using existing PSK: {current_psk[:16]}...")
            regenerate = input("  Generate new PSK? [y/N]: ").strip().lower()
            if regenerate == 'y':
                psk = self.generate_psk()
                log_info(f"  ‚úì Generated new PSK: {psk[:16]}...")
            else:
                psk = current_psk
        else:
            psk = self.generate_psk()
            log_info(f"  ‚úì Generated new PSK: {psk[:16]}...")

        current_admin = config.get('discovery_service', {}).get('admin_token', '')
        if current_admin and not current_admin.startswith('CHANGE_ME'):
            admin_token = current_admin
            log_info("  ‚úì Using existing admin token")
        else:
            admin_token = self.generate_admin_token()
            log_info("  ‚úì Generated new admin token")

        config['discovery_service'] = {
            'ip': ip,
            'port': port,
            'psk': psk,
            'admin_token': admin_token
        }
        config['bootstrap'] = {'config_repo_url': repo}

        print()

        # Netbird Configuration
        log_header("üîó Netbird VPN:")
        current_netbird = config.get('netbird', {}).get('setup_key', '')
        if current_netbird and not current_netbird.startswith('CHANGE_ME'):
            netbird_key = input(f"  Setup key [{current_netbird[:20]}...]: ").strip() or current_netbird
        else:
            netbird_key = input("  Netbird setup key: ").strip()

        if netbird_key:
            config['netbird'] = {'setup_key': netbird_key}
            log_info("  ‚úì Netbird setup key configured")
        else:
            log_warn("  ‚ö†Ô∏è  No Netbird setup key provided")

        print()

        # SSH Keys
        log_header("üóùÔ∏è  SSH Keys:")
        current_keys = config.get('ssh_keys', [])

        if current_keys and not any(key.startswith('ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI...') for key in current_keys):
            log_info(f"  Found {len(current_keys)} existing SSH key(s)")
            for i, key in enumerate(current_keys, 1):
                key_type = key.split()[0] if key.split() else "unknown"
                key_comment = key.split()[-1] if len(key.split()) > 2 else "no comment"
                log_info(f"    [{i}] {key_type} {key_comment}")

            modify_keys = input("  Modify SSH keys? [y/N]: ").strip().lower()
            if modify_keys != 'y':
                print()
                ssh_keys = current_keys
            else:
                ssh_keys = self._configure_ssh_keys()
        else:
            ssh_keys = self._configure_ssh_keys()

        config['ssh_keys'] = ssh_keys

        print()

        # NTFY Configuration
        log_header("üì± NTFY Notifications:")
        current_ntfy = config.get('ntfy', {})
        current_enabled = current_ntfy.get('enabled', False)

        enable_input = input(f"  Enable notifications? [{'Y/n' if current_enabled else 'y/N'}]: ").strip().lower()
        if current_enabled:
            enable_ntfy = enable_input != 'n'
        else:
            enable_ntfy = enable_input == 'y'

        if enable_ntfy:
            ntfy_config = self._configure_ntfy(current_ntfy)
            config['ntfy'] = ntfy_config
        else:
            config['ntfy'] = {'enabled': False}
            log_info("  NTFY notifications disabled")

        print()

        # Set other required config sections from template
        for section in ['security', 'logging', 'database']:
            if section not in config:
                config[section] = template.get(section, {})

        # Save configuration
        log_header("üíæ Saving Configuration:")
        if self.save_config(config):
            log_info("‚úÖ Configuration saved successfully!")

            # Test NTFY if enabled
            if config.get('ntfy', {}).get('enabled', False):
                print()
                test_ntfy = input("  Test NTFY notifications now? [Y/n]: ").strip().lower()
                if test_ntfy != 'n':
                    self.test_ntfy(config)

            print()
            log_header("üéâ Setup Complete!")
            log_info("Next steps:")
            log_info("  1. Deploy discovery service: cd discovery-service && docker-compose up -d")
            log_info("  2. Build bootstrap image: cd bootstrap-image && ./build.sh")
            log_info("  3. Monitor: docker-compose logs -f discovery-service")
        else:
            log_error("‚ùå Failed to save configuration")
            sys.exit(1)

    def _configure_ssh_keys(self) -> list:
        """Configure SSH keys interactively"""
        ssh_keys = []

        # Check for common SSH key locations
        ssh_dir = Path.home() / ".ssh"
        found_keys = []

        if ssh_dir.exists():
            for key_file in ["id_ed25519.pub", "id_rsa.pub", "id_ecdsa.pub"]:
                key_path = ssh_dir / key_file
                if key_path.exists():
                    try:
                        with open(key_path, 'r') as f:
                            key_content = f.read().strip()
                            found_keys.append((key_file, key_content))
                    except:
                        pass

        if found_keys:
            log_info("  Found SSH keys in ~/.ssh/:")
            for i, (filename, key_content) in enumerate(found_keys, 1):
                key_comment = key_content.split()[-1] if len(key_content.split()) > 2 else "no comment"
                log_info(f"    [{i}] {filename} ({key_comment})")

            selection = input(f"  Select keys to add (e.g., 1,2 or 'all') [all]: ").strip() or "all"

            if selection.lower() == "all":
                ssh_keys.extend([key_content for _, key_content in found_keys])
            else:
                try:
                    indices = [int(x.strip()) - 1 for x in selection.split(',')]
                    for idx in indices:
                        if 0 <= idx < len(found_keys):
                            ssh_keys.append(found_keys[idx][1])
                except:
                    log_warn("  Invalid selection, skipping automatic key detection")

        # Allow manual key entry
        while True:
            add_manual = input("  Add custom SSH key? [y/N]: ").strip().lower()
            if add_manual != 'y':
                break

            custom_key = input("  Paste SSH public key: ").strip()
            if custom_key:
                ssh_keys.append(custom_key)
                log_info("  ‚úì Added custom SSH key")

        log_info(f"  Configured {len(ssh_keys)} SSH key(s)")
        return ssh_keys

    def _configure_ntfy(self, current: Dict[str, Any]) -> Dict[str, Any]:
        """Configure NTFY settings interactively"""
        ntfy_config = current.copy() if current else {}
        ntfy_config['enabled'] = True

        current_url = ntfy_config.get('url', '')
        url = input(f"  NTFY URL [{current_url}]: ").strip() or current_url
        ntfy_config['url'] = url

        current_auth = ntfy_config.get('auth_type', 'none')
        print(f"  Authentication type:")
        print(f"    [1] None (open topic)")
        print(f"    [2] Basic (username/password)")
        print(f"    [3] Bearer token")

        auth_choice = input(f"  Select authentication [{current_auth}]: ").strip()

        auth_map = {'1': 'none', '2': 'basic', '3': 'bearer'}
        auth_type = auth_map.get(auth_choice, current_auth)
        ntfy_config['auth_type'] = auth_type

        if auth_type == 'basic':
            username = input("  Username: ").strip()
            password = input("  Password: ").strip()
            ntfy_config['username'] = username
            ntfy_config['password'] = password
        elif auth_type == 'bearer':
            token = input("  Bearer token: ").strip()
            ntfy_config['token'] = token

        # Set defaults for other settings
        ntfy_config.setdefault('priority', 'default')
        ntfy_config.setdefault('tags', ['raspberry-pi', 'bootstrap', 'sensors'])
        ntfy_config.setdefault('retry_attempts', 3)
        ntfy_config.setdefault('timeout_seconds', 10)

        log_info("  ‚úì NTFY configuration completed")
        return ntfy_config

def main():
    parser = argparse.ArgumentParser(description='Deployment Configuration Manager')
    parser.add_argument('--ntfy-test', action='store_true',
                       help='Test NTFY connectivity only')

    args = parser.parse_args()

    configurator = DeploymentConfigurator()

    if args.ntfy_test:
        log_header("üß™ NTFY Connectivity Test")
        log_header("=" * 30)

        config = configurator.load_config()
        if not config:
            log_error("No deployment configuration found!")
            log_error("Run 'python3 setup_deployment.py' first to create configuration")
            sys.exit(1)

        success = configurator.test_ntfy(config)
        sys.exit(0 if success else 1)

    else:
        configurator.interactive_setup()

if __name__ == "__main__":
    main()
